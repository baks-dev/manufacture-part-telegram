<?php
/*
 *  Copyright 2023.  Baks.dev <admin@baks.dev>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is furnished
 *  to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

declare(strict_types=1);

namespace BaksDev\Manufacture\Part\Messenger\TelegramManufacturePartDefect;

use BaksDev\Auth\Telegram\Repository\ActiveProfileByAccountTelegram\ActiveProfileByAccountTelegramInterface;
use BaksDev\Manufacture\Part\Entity\Event\ManufacturePartEvent;
use BaksDev\Manufacture\Part\Repository\ActiveManufacturePartByProduct\ActiveManufacturePartByProductInterface;
use BaksDev\Manufacture\Part\Repository\ActiveWorkingManufacturePart\ActiveWorkingManufacturePartInterface;
use BaksDev\Manufacture\Part\Repository\AllWorkingByManufacturePart\AllWorkingByManufacturePartInterface;
use BaksDev\Manufacture\Part\Type\Id\ManufacturePartUid;
use BaksDev\Manufacture\Part\Type\Telegram\ManufacturePartDefect;
use BaksDev\Manufacture\Part\UseCase\Admin\Working\WorkingManufacturePartDTO;
use BaksDev\Manufacture\Part\UseCase\Admin\Working\WorkingManufacturePartHandler;
use BaksDev\Products\Category\Type\Id\ProductCategoryUid;
use BaksDev\Telegram\Api\TelegramSendMessage;
use BaksDev\Telegram\Api\TelegramSendPhoto;
use BaksDev\Telegram\Bot\Messenger\Callback\TelegramCallbackMessage;
use BaksDev\Telegram\Bot\Repository\UsersTableTelegramSettings\GetTelegramBotSettingsInterface;
use DateTimeImmutable;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\Cache\Adapter\ApcuAdapter;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\DependencyInjection\Attribute\TaggedIterator;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;
use Symfony\Contracts\Translation\TranslatorInterface;

#[AsMessageHandler(priority: 99)]
final class TelegramManufacturePartDefect
{
    private TelegramSendMessage $telegramSendMessage;
    private GetTelegramBotSettingsInterface $settings;
    private EntityManagerInterface $entityManager;
    private ActiveProfileByAccountTelegramInterface $activeProfileByAccountTelegram;
    private AllWorkingByManufacturePartInterface $allWorkingByManufacturePart;
    private TranslatorInterface $translator;
    private TelegramSendPhoto $telegramSendPhoto;
    private KernelInterface $kernel;
    private WorkingManufacturePartHandler $workingManufacturePartHandler;
    private ActiveWorkingManufacturePartInterface $activeWorkingManufacturePart;

    private iterable $reference;
    private string $CDN_HOST;
    private string $HOST;
    private ActiveManufacturePartByProductInterface $activeManufacturePartByProduct;
    private LoggerInterface $logger;

    public function __construct(
        #[TaggedIterator('baks.reference.choice')] iterable $reference,
        #[Autowire(env: 'CDN_HOST')] string $CDN_HOST,
        #[Autowire(env: 'HOST')] string $HOST,
        EntityManagerInterface $entityManager,
        TranslatorInterface $translator,
        KernelInterface $kernel,
        ActiveProfileByAccountTelegramInterface $activeProfileByAccountTelegram,
        ActiveWorkingManufacturePartInterface $activeWorkingManufacturePart,
        TelegramSendMessage $telegramSendMessage,
        TelegramSendPhoto $telegramSendPhoto,
        GetTelegramBotSettingsInterface $settings,
        AllWorkingByManufacturePartInterface $allWorkingByManufacturePart,
        WorkingManufacturePartHandler $workingManufacturePartHandler,
        ActiveManufacturePartByProductInterface $activeManufacturePartByProduct,
        LoggerInterface $logger
    )
    {
        $this->telegramSendMessage = $telegramSendMessage;
        $this->settings = $settings;
        $this->entityManager = $entityManager;
        $this->activeProfileByAccountTelegram = $activeProfileByAccountTelegram;
        $this->activeWorkingManufacturePart = $activeWorkingManufacturePart;
        $this->allWorkingByManufacturePart = $allWorkingByManufacturePart;
        $this->reference = $reference;
        $this->translator = $translator;
        $this->telegramSendPhoto = $telegramSendPhoto;
        $this->workingManufacturePartHandler = $workingManufacturePartHandler;
        $this->kernel = $kernel;

        $this->CDN_HOST = $CDN_HOST;
        $this->HOST = $HOST;
        $this->activeManufacturePartByProduct = $activeManufacturePartByProduct;
        $this->logger = $logger;
    }

    /**
     * Если пользователь нажал на кнопку "Выполнено все .... шт" и присвоен идентификатор заявки
     */
    public function __invoke(TelegramCallbackMessage $message): void
    {

        if(!$message->getClass() instanceof ManufacturePartDefect)
        {
            return;
        }


        $ApcuAdapter = new ApcuAdapter('TelegramBot');



        /**
         * Получаем заявку на производство (незавершенную, самую старую) по идентификатору продукта
         */
        $ManufacturePart = $this->activeManufacturePartByProduct->findManufacturePartByProduct($message->getClass());



        if($ManufacturePart)
        {
            /**
             * Получаем активный профиль пользователя чата
             */

            $UserProfileUid = $this->activeProfileByAccountTelegram->getActiveProfileUidOrNullResultByChat($message->getChat());

            if($UserProfileUid === null)
            {
                /** Сбрасываем состояние диалога */
                $ApcuAdapter->delete('identifier-'.$message->getChat());
                $ApcuAdapter->delete('callback-'.$message->getChat());
                return;
            }



            /** Присваиваем настройки Telegram */

            $settings = $this->settings->settings();

            $this->telegramSendMessage
                ->token($settings->getToken())
                ->chanel($message->getChat());

            $this->telegramSendPhoto
                ->token($settings->getToken())
                ->chanel($message->getChat());


            /**
             * Получаем информацию о партии производства со всеми выполненными действиями
             */

            $ManufacturePartProduct = $this->allWorkingByManufacturePart
                ->fetchAllWorkingByManufacturePartAssociative($ManufacturePart->getId());
            $CurrentManufacturePart = current($ManufacturePartProduct);



            /** Если имеется хотя бы одно действие */
            if($CurrentManufacturePart)
            {
                /** Получаем активное рабочее состояние */
                $UsersTableActionsWorkingUid = $this->activeWorkingManufacturePart
                    ->findNextWorkingByManufacturePart(
                        $ManufacturePart->getId(),
                        new ProductCategoryUid($CurrentManufacturePart['product_category_id'])
                    );
            }




            if(!$CurrentManufacturePart || !$UsersTableActionsWorkingUid)
            {
                /** Отправляем сообщение о выполненной заявке  */
                $this->telegramSendMessage
                    ->message('Заявка выполнена')
                    ->send();

                /** Сбрасываем идентификатор */
                $ApcuAdapter->delete('identifier-'.$message->getChat());
                return;
            }


            /** Если торговое предложение Справочник - ищем домен переводов */
            if($CurrentManufacturePart['product_offer_reference'])
            {
                foreach($this->reference as $reference)
                {
                    if($reference->type() === $CurrentManufacturePart['product_offer_reference'])
                    {
                        $CurrentManufacturePart['product_offer_value'] = $this->translator->trans($CurrentManufacturePart['product_offer_value'], domain: $reference->domain());

                    }
                }
            }

            /** Если множественный вариант Справочник - ищем домен переводов */
            if($CurrentManufacturePart['product_variation_reference'])
            {
                foreach($this->reference as $reference)
                {
                    if($reference->type() === $CurrentManufacturePart['product_variation_reference'])
                    {
                        $CurrentManufacturePart['product_variation_value'] = $this->translator->trans($CurrentManufacturePart['product_variation_value'], domain: $reference->domain());

                    }
                }
            }

            /** Если модификатор Справочник - ищем домен переводов */
            if($CurrentManufacturePart['product_modification_reference'])
            {
                foreach($this->reference as $reference)
                {
                    if($reference->type() === $CurrentManufacturePart['product_modification_reference'])
                    {
                        $CurrentManufacturePart['product_modification_value'] = $this->translator->trans($CurrentManufacturePart['product_modification_value'], domain: $reference->domain());

                    }
                }
            }

            $img_path = $CurrentManufacturePart['product_image_cdn'] ? 'https://'.$this->CDN_HOST : 'https://'.$this->HOST;

            /** Пережимаем фото для отправки в Telegram */
            if($CurrentManufacturePart['product_image'] && !$CurrentManufacturePart['product_image_cdn'])
            {
                $projectImgPath = $this->kernel->getProjectDir().'/public/'.$CurrentManufacturePart['product_image'].$CurrentManufacturePart['product_image_ext'];
                $this->telegramSendPhoto->file($projectImgPath);
            }

            $ProductPhoto = $CurrentManufacturePart['product_image'] ? $img_path.$CurrentManufacturePart['product_image'].'small.webp' : '/assets/img/blank.svg';


            /* Если передан текст сообщения - передано количество брака продукции */
            if(!empty($message->getData()))
            {
                /** Сбрасываем идентификатор и callback */
                $ApcuAdapter->delete('identifier-'.$message->getChat());
                //$ApcuAdapter->delete('callback-'.$message->getChat());

                /** Возвращает пользователя на производство */
//                $ApcuAdapter->get('callback-'.$message->getChat(), function(ItemInterface $item) {
//                    $item->expiresAfter(60 * 60 * 24);
//                    return ManufacturePartUid::class;
//                });

                /** Возвращает пользователя на производство */
                $TelegramCallback = $ApcuAdapter->getItem('callback-'.$message->getChat());
                $TelegramCallback->set(ManufacturePartUid::class);
                $TelegramCallback->expiresAfter(60 * 60 * 24);
                $ApcuAdapter->save($TelegramCallback);


                /** Название продукта */
                $productName = $CurrentManufacturePart['product_name']."\n";
                $productName .= $CurrentManufacturePart['product_offer_value'].' ' ?: '';
                $productName .= $CurrentManufacturePart['product_variation_value'].' ' ?: '';
                $productName .= $CurrentManufacturePart['product_modification_value'].' ' ?: '';


                /** Получаем активное событие заявки на производство  */
                $ManufacturePartEvent = $this->entityManager->getRepository(ManufacturePartEvent::class)
                    ->find($ManufacturePart->getEvent());

                $WorkingManufacturePartDTO = new WorkingManufacturePartDTO();
                $ManufacturePartEvent->getDto($WorkingManufacturePartDTO);
                $ManufacturePartWorkingDTO = $WorkingManufacturePartDTO->getWorking();


                $quantity = filter_var($message->getData(), FILTER_SANITIZE_NUMBER_INT) * 1;
                $workingQuantity = $ManufacturePartWorkingDTO->getQuantity() ?: $CurrentManufacturePart['part_total'];
                $resultQuantity = $workingQuantity - $quantity;

                /** Если количество меньше 1 или больше чем было на этапе производства, либо результат меньше 0 */
                if($quantity < 1 || $quantity > $workingQuantity || $resultQuantity < 0)
                {
                    /** Отправляем сообщение об ошибке */
                    $this->telegramSendMessage
                        ->message(sprintf('Отправьте в сообщении количество брака продукции %s:', $productName))
                        ->send();
                    return;
                }

                $ManufacturePartWorkingDTO->setProfile($UserProfileUid);
                $ManufacturePartWorkingDTO->setWorking($UsersTableActionsWorkingUid);
                $ManufacturePartWorkingDTO->setQuantity($resultQuantity);
                $this->workingManufacturePartHandler->handle($WorkingManufacturePartDTO);


                $messageHandler = "<b>Выполненный этап производства:</b>\n";
                $messageHandler .= sprintf("%s\n", $productName); // название продукта
                $messageHandler .= sprintf("Дата %s\n", (new DateTimeImmutable())->format('d.m.Y H:i')); // Дата выполненного этапа
                $messageHandler .= sprintf("%s <b>%s шт.</b>\n", $UsersTableActionsWorkingUid->getAttr(), $ManufacturePartWorkingDTO->getQuantity()); // Этап производства
                $messageHandler .= sprintf("Брак изделия <b>%s шт.</b>", $quantity); // Брак

                /** Отправляем сообщение об успешном выполнении этапа */
                $this->telegramSendMessage
                    ->message($messageHandler)
                    ->send();

                return;
            }


            $caption = "<b>Брак:</b>\n".$CurrentManufacturePart['product_name']."\n";

            $caption .= $CurrentManufacturePart['product_offer_value'].' ' ?: '';
            $caption .= $CurrentManufacturePart['product_variation_value'].' ' ?: '';
            $caption .= $CurrentManufacturePart['product_modification_value'].' ' ?: '';
            $caption .= "\n";
            $caption .= "\n";


            /** Символ выполненного процесса  */
            $char = "\u2611\ufe0f";
            $decoded = json_decode('["'.$char.'"]');
            $done = mb_convert_encoding($decoded[0], 'UTF-8');


            /** Символ активного процесса  */
            $char = "\u274C";
            $decoded = json_decode('["'.$char.'"]');
            $right = mb_convert_encoding($decoded[0], 'UTF-8');

            /** Символ НЕвыполненного процесса  */
            $char = "\u2705";
            $decoded = json_decode('["'.$char.'"]');
            $muted = mb_convert_encoding($decoded[0], 'UTF-8');


            $currentWorkingName = null;

            foreach($ManufacturePartProduct as $working)
            {
                $icon = $currentWorkingName ? $done : $muted;

                if($UsersTableActionsWorkingUid->equals($working['working_id']))
                {
                    $currentWorkingName = $working['working_name'];
                    $icon = $right;
                }


                $caption .= $icon;
                $caption .= ' '.$working['working_name'];

                if($UsersTableActionsWorkingUid->equals($working['working_id']))
                {
                    $caption .= '- <b>БРАК ИЗДЕЛИЯ</b>';
                }

                $caption .= "\n";
            }


            $caption .= "\nОтправьте в сообщении количество брака на этапе <b>".$currentWorkingName.'</b>:';

            $menu[] = [
                'text' => 'Отмена брака изделия',
                'callback_data' => ManufacturePartUid::class
            ];

            $markup = json_encode([
                'inline_keyboard' => array_chunk($menu, 1),
            ]);

            $response = $this->telegramSendPhoto
                ->photo($ProductPhoto)
                ->caption($caption)
                ->markup($markup)
                ->send(false);

            /** Сохраняем последнее сообщение */
            $lastMessage = $ApcuAdapter->getItem('last-'.$message->getChat());
            $lastMessage->set($response['result']['message_id']);
            $lastMessage->expiresAfter(60 * 60 * 24);
            $ApcuAdapter->save($lastMessage);

//            $cache->delete('last-'.$message->getChat());
//            $cache->get('last-'.$message->getChat(), function(ItemInterface $item) use ($response) {
//                $item->expiresAfter(60 * 60 * 24);
//                return $response['result']['message_id'];
//            });

        }
        else
        {
            /** Отправляем сообщение о выполненной заявке  */
            $this->telegramSendMessage
                ->message('Заявка выполнена')
                ->send();

            /** Сбрасываем идентификатор */
            $ApcuAdapter->delete('identifier-'.$message->getChat());

            /** Возвращает пользователя на производство */
            $TelegramCallback = $ApcuAdapter->getItem('callback-'.$message->getChat());
            $TelegramCallback->set(ManufacturePartUid::class);
            $TelegramCallback->expiresAfter(60 * 60 * 24);
            $ApcuAdapter->save($TelegramCallback);
        }
        
    }
}